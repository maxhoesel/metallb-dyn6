---

# This workflow automatically creates a PR that, when merged, will automatically
# trigger the next release.
#
# The release PR bumps the version number in affected files, such as Cargo.toml, helm charts, pyproject.toml, etc.
#
# The actual release is published by the release-push.yml workflow, while artifacts are built by publish.yml
name: Prepare a new Release PR

on:
  workflow_dispatch:

jobs:
  update-release-draft:
    name: Update Release Draft
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.drafter.outputs.name }}
    steps:
      - uses: release-drafter/release-drafter@v5
        id: drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  prepare-release-pr:
    name: Create release PR
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - update-release-draft
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3

      - name: Setup rust
        uses: dtolnay/rust-toolchain@stable
        with:
          override: true
          toolchain: stable
      - name: Enable cargo caching
        uses: Swatinem/rust-cache@v2
      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: "3"

      - name: Install cargo-edit
        run: cargo install cargo-edit --locked
      - name: Update cargo version
        run: |
          cargo set-version --workspace "${{ needs.update-release-draft.outputs.release_name }}"
          cargo update -w

      - name: Update chart version
        working-directory: helm/charts/metallb-dyn6
        run: |
          make version

      - name: Open PR for release
        uses: peter-evans/create-pull-request@v5
        with:
          add-paths: |
            Cargo.toml
            Cargo.lock
            helm/charts/**/Chart.yaml
          title: Release ${{ needs.update-release-draft.outputs.release_name }}
          body: |
            Merge this PR to update the app to version ${{ needs.update-release-draft.outputs.release_name }}.
            Then, publish the GitHub release when you are ready.

            This PR was created by the prepare-release workflow.
          commit-message: "Release ${{ needs.update-release-draft.outputs.release_name }}"
          branch: maintenance/release-pr
          labels: pr-nochangelog
          delete-branch: true
